name: Deploy WebGL via Pages Artifact

on:
  push:
    branches: [ main ]          # Repo A가 실제로 푸시하는 브랜치와 동일
  workflow_dispatch:             # (선택) 수동 실행 허용

permissions:
  pages: write
  id-token: write
  contents: read
  actions: read

concurrency:
  group: pages-deploy
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - uses: actions/checkout@v4

      - name: Configure Pages
        uses: actions/configure-pages@v5

      # (재실행 대비) 같은 run 안에 남아있을 수 있는 'github-pages' 아티팩트 선삭제
      - name: Pre-clean leftover 'github-pages' artifact (safe for reruns)
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          REPO="${{ github.repository }}"
          RUN="${{ github.run_id }}"
          curl -sS -H "Authorization: Bearer $GITHUB_TOKEN" \
               -H "Accept: application/vnd.github+json" \
               "https://api.github.com/repos/$REPO/actions/runs/$RUN/artifacts" > artifacts.json
          IDS=$(jq -r '.artifacts[] | select(.name=="github-pages") | .id' artifacts.json || true)
          for id in $IDS; do
            echo "Deleting artifact id=$id"
            curl -sS -X DELETE -H "Authorization: Bearer $GITHUB_TOKEN" \
                 -H "Accept: application/vnd.github+json" \
                 "https://api.github.com/repos/$REPO/actions/artifacts/$id" || true
          done

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site              # <- Repo A가 푸시한 폴더

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      # ✅ 성공만 알림
      - name: Notify Discord — success
        if: ${{ success() && secrets.DISCORD_WEBHOOK_URL != '' }}
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          PAGE_URL: ${{ steps.deployment.outputs.page_url }}
        run: |
          payload=$(printf '{"content":"✅ Pages deployment success\n🔗 %s"}' "${PAGE_URL:-N/A}")
          curl -sS -H "Content-Type: application/json" -X POST -d "$payload" "$DISCORD_WEBHOOK_URL"

      # ❌ 실패만 알림 (취소 제외)
      - name: Notify Discord — failure
        if: ${{ failure() && !cancelled() && secrets.DISCORD_WEBHOOK_URL != '' }}
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          payload=$(printf '{"content":"❌ Pages deployment failed\n🔎 Logs: %s"}' "$RUN_URL")
          curl -sS -H "Content-Type: application/json" -X POST -d "$payload" "$DISCORD_WEBHOOK_URL"


      # (선택) 배포 후 Pages 아티팩트 깔끔하게 삭제
      - name: Delete Pages artifact via REST API
        if: ${{ success() }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          REPO="${{ github.repository }}"
          RUN="${{ github.run_id }}"
          curl -sS -H "Authorization: Bearer $GITHUB_TOKEN" \
               -H "Accept: application/vnd.github+json" \
               "https://api.github.com/repos/$REPO/actions/runs/$RUN/artifacts" > artifacts.json
          IDS=$(jq -r '.artifacts[] | select(.name=="github-pages") | .id' artifacts.json)
          for id in $IDS; do
            echo "Deleting artifact id=$id"
            curl -sS -X DELETE -H "Authorization: Bearer $GITHUB_TOKEN" \
                 -H "Accept: application/vnd.github+json" \
                 "https://api.github.com/repos/$REPO/actions/artifacts/$id"
          done
